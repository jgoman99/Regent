# -*- coding: utf-8 -*-
"""
Created on Wed Jan 20 16:50:37 2021

@author: jgfri
"""

from cvxopt.glpk import ilp
import numpy as np
from cvxopt import matrix
import sys
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import re



class stackedExample(QWidget):
    def __init__(self, parent=None):
        QWidget.__init__(self, parent=parent)
        
        self.constraintEdits = []
        self.lay = QHBoxLayout(self)
        self.leftLay = QVBoxLayout(self)
        self.rightLay = QVBoxLayout(self)
        self.formulaStr = ""
        self.constraintStr = ""
        self.vars = []
        
        formulaLabel = QLabel("Formula:")
        self.formulaEdit = QLineEdit("x1 + x2 + x3")
        first_lay = QHBoxLayout()
        first_lay.addWidget(formulaLabel)
        first_lay.addWidget(self.formulaEdit)
        
        formulaOutputLay = QVBoxLayout()
        self.formulaOutputLabel = QLabel("")
        formulaOutputLay.addWidget(self.formulaOutputLabel)
        
        second_lay = QHBoxLayout()
        constraintsLabel = QLabel("Constraints:")
        addConstraintsButton = QPushButton("Add Constraint")
        second_lay.addWidget(constraintsLabel)
        second_lay.addWidget(addConstraintsButton)
        
        self.third_lay = QVBoxLayout()

        fourth_lay = QHBoxLayout()
        calculateButton = QPushButton("Calculate")
        fourth_lay.addWidget(calculateButton)
        
        self.constraintOutputLay = QVBoxLayout()
        self.constraintOutputLabel = QLabel("")
        self.constraintOutputLay.addWidget(self.constraintOutputLabel)
        
        self.leftLay.addLayout(first_lay)
        self.leftLay.addLayout(formulaOutputLay)
        self.leftLay.addLayout(second_lay)
        self.leftLay.addLayout(self.third_lay)
        self.leftLay.addLayout(fourth_lay)
        self.leftLay.addLayout(self.constraintOutputLay)
        

        
        
        self.lay.addLayout(self.leftLay)
        self.lay.addLayout(self.rightLay)
        
        addConstraintsButton.clicked.connect(self.addConstraint)
        calculateButton.clicked.connect(self.calculate)

    def addConstraint(self):
        newEdit = QLineEdit("")
        self.constraintEdits.append(newEdit)
        self.refresh()
    def refresh(self):
        for constraintEdit in self.constraintEdits:
            self.third_lay.addWidget(constraintEdit)
            constraintEdit.show()
        
        self.formulaOutputLabel.setText(self.formulaStr)
        self.constraintOutputLabel.setText(self.constraintStr)
            
    def calculate(self):
        self.formulaStr = self.formulaEdit.text()
        self.constraintStr = ""
        for constraintEdit in self.constraintEdits:
            self.constraintStr += constraintEdit.text() + ";"
        self.refresh()
        self.convertStrtoArray()
        
    def calculateNumVariables(self):
        allstr = self.formulaStr + self.constraintStr 
        allstr = allstr.replace(";"," ")
        allstr = allstr.replace("+"," ")
        allstr = allstr.replace("-"," ")
        allvars = allstr.split()
        self.vars = set(allvars)
        
    def convertStrtoArray(self):
        #if "x0" in self.vars:
        idxs = [m.start() for m in re.finditer('\+|\-', self.formulaStr)]
        indexFirstVar = re.match('[a-zA-Z]', self.formulaStr).start()
        #if indexFirstVar < idxs[0]:
        print(idxs)
            

if __name__ == '__main__':
    app = QApplication(sys.argv)
    w = stackedExample()
    w.show()
    sys.exit(app.exec_())


c=matrix(np.ones(6,dtype=float))
coeff=np.array([[1,1,0,0,0,0],
                [1,1,0,0,0,1],
                [0,0,1,1,0,0],
                [0,0,1,1,1,0],
                [0,0,0,1,1,1],
                [0,1,0,0,1,1]
                ],dtype=float)
G=matrix(-coeff)
h=matrix(-1*np.ones(6))
I=set([2,3,4,5])
B=set([0,1])
(status,x)=ilp(c,G,h,matrix(1., (0,6)),matrix(1., (0,1)),I,B)
